PROGRAM="IyEvYmluL2Jhc2gKI1RoaXMgaXMgdG9vbCBTY2FuIEROUyB3ZWJzaXRlIGFuZCBWdWxuZXJzCiNOdW1iZXJzCm4xPSIxIgpuMj0iMiIKbjM9IjMiCm40PSI0IgpuNT0iNSIKbjY9IjYiCm43PSI3IgpuOD0iOCIKbjk9IjkiCnk9IlkiCm49Im4iCmlwPSJJUCIKaG9zdD0iSE9TVCIKI0NvbG9ycwp3aGl0ZT0iXDAzM1sxOzM3bSIKZ3JleT0iXDAzM1swOzM3bSIKcHVycGxlPSJcMDMzWzA7MzVtIgpyZWQ9IlwwMzNbMTszMW0iCmdyZWVuPSJcMDMzWzE7MzJtIgp5ZWxsb3c9IlwwMzNbMTszM20iCnB1cnBsZT0iXDAzM1swOzM1bSIKY3lhbj0iXDAzM1swOzM2bSIKY2FmZT0iXDAzM1swOzMzbSIKZml1c2NoYT0iXDAzM1swOzM1bSIKYmx1ZT0iXDAzM1sxOzM0bSIKbmM9IlxlWzBtIgpmdW5jdGlvbiBBUEkoKSB7CiAgICAgICAgZWNobyAtZSAiJGN5YW4gUGxlYXNlIEVudGVyIEFQSSBLRVkhJG5jIgogICAgICAgIGVjaG8gIiIKICAgICAgICByZWFkIC1wICIkKGVjaG8gLWUgJHJlZFskZ3JlZW4rJHJlZF0kbmMpICQoZWNobyAtZSAkd2hpdGUgQVBJIEtFWSA6JG5jKSAiIHRsMgogICAgICAgIGlmIFsgJHRsMiA9IDE0MzYxNjljNDZlMDBmNTU0MWNmOWFiNjQ5ZjU1NjQ0IF07IHRoZW4KICAgICAgICBlY2hvIC1lICIkd25pdGVb4pyTXSRncmVlbiBBUEkgS0VZIGlzIE9ubGluZSDigKIiCiAgICAgICAgc2xlZXAgMwogICAgICAgIGVsaWYgWyAkdGwyID0gYW5vbm9wc3ZuIF07IHRoZW4KICAgICAgICBlY2hvIC1lICIkd25pdGVb4pyTXSRncmVlbiBXZWxjb21lIEJhY2sgLCBBZG1pbiBQaGFtIENoaWVuICIKICAgICAgICBzbGVlcCAzCiAgICAgICAgZWxzZQogICAgICAgIGVjaG8gLWUgIiRyZWRbw5ddIExPTCAsIEVycl9BUElfS0VZIgogICAgICAgIGVjaG8gLWUgIiRncmVlblvDl10gcGxlYXNlIGNvbnRhY3QgdGVsZWdyYW0gQGFub25vcHN2biB0byBnZXQgdGhlIGFwaSIKICAgICAgICBleGl0IDEKICAgICAgICBmaQp9CiMKZnVuY3Rpb24gQmFubmVyKCkgewpjbGVhcgplY2hvIC1lICJbK10kZ3JlZW4gdG9vbCBjaGVja2VyIEluZm9tYXRpb25zIFdlYnNpdGUKJGJsdWUKIC4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4KICAgICAqICAgLiAgICAgICAgICAgICAgICAgIC4gICAgICAgICAgICAgIC4gICAgICAgIC4gICAqICAgICAgICAgIC4KICAuICAgICAgICAgLiAgICAgICAgICAgICAgICAgICAgIC4gICAgICAgLiAgICAgICAgICAgLiAgICAgIC4gICAgICAgIC4KICAgICAgICBvICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuICAgICAgICAgICAgICAgICAgIC4KICAgICAgICAgLiAgICAgICAgICAgICAgLiAgICAgICAgICAgICAgICAgIC4gICAgICAgICAgIC4KICAgICAgICAgIDAgICAgIC4KICAgICAgICAgICBcICAgICAgLiAgICAgICAgICAuICAgICAgICAgICAgICAgICAsICAgICAgICAgICAgICAgICwgICAgLAogLiAgICAgICAgICBcICAgICAgICAgIC4gICAgICAgICAgICAgICAgICAgICAgICAgLgogICAgICAuICAgICAgXCAgICwKICAgLiAgICAgICAgICBvICAgICAuICAgIEFub255bW91c19WTlBDIC4gICAgICAgICAgICAgICAgICAgLiAgICAgICAgICAgIC4KICAgICAuICAgICAgICAgXCAgICAgICAgICAgICAgICAgLCAgICAgICAgICAgICAuICAgICAgICAgICAgICAgIC4KICAgICAgICAgICAgICAgI1wjI1wjICAgICAgLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4gICAgICAgIC4KICAgICAgICAgICAgICMgICNPIyNcIyMjICAgICBUcmhhY2tub24gLiAgICAgICAgICAgICAgICAgICAgICAgIC4KICAgLiAgICAgICAgIyojICAjXCMjXCMjIyAgICAgICAgICAgICAgICAgICAgICAgLiAgICAgICAgICAgICAgICAgICAgICwKICAgICAgICAuICAgIyMqIyAgI1wjI1wjIyAgICAgICAgICAgICAgIC4gICAgICAgICAgICAgICAgICAgICAuCiAgICAgIC4gICAgICAjIyojICAjbyMjXCMgICAgICAgICAuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsCiAgICAgICAgICAuICAgICAqIyAgI1wjICAgICAuICAgICAgICAgICAgICAgICAgICAuICAgICAgICAgICAgIC4gICAgICAgICAgLAogICAgICAgICAgICAgICAgICAgICAgXCAgICAgICAgICAuICAgICAgICAgICAgICAgICAgICAgICAgIC4KJGNhZmUgX19fX14vXF9fX14tLV9fX18vXF9fX19PX19fX19fX19fX19fX18vXC9cLS0tL1xfX19fX19fX19fXy0tLV9fX19fX19fX19fX19fCiAgIC9cXiAgIF4gIF4gICAgXiAgICAgICAgICAgICAgICAgIF5eIF4gICdcIF4gICAgICAgICAgXiAgICAgICAtLS0KICAgICAgICAgLS0gICAgICAgICAgIC0gICAgICAgICAgICAtLSAgLSAgICAgIC0gICAgICAgICAtLS0gIF9fICAgICAgIF4KICAgLS0gIF9fICAgICAgICAgICAgICAgICAgICAgIF9fXy0tICBeICBeICAgICAgICAgICAgICAgICAgICAgICAgIC0tICBfXyRuYwokYmx1ZVstLS1dICAgICAgICBUaGUgIEFPUyBTcGxvaXRzICwgRE5TICwgV0VCICgkY2FmZSBDaDEzbiRibHVlKSAgICAgIFstLS1dCiRibHVlWy0tLV0gICAgICAgIG1vZGRlZCBieTokcmVkIFRSSEFDS05PTiRibHVlICgkY2FmZSBUUkhBQ0tOT04kYmx1ZSkgICAgICAgICBbLS0tXQogICAgICAgICAgICAgICAgICRibHVlIFZlcnNpb246JHJlZCAyLjAuMAogICAgICAgICAgICAgICAgICRibHVlIENvZGVuYW1lOiRjYWZlICdUUkhBQ0tOT04nCiRibHVlWy0tLV0gICAgICAgIEZvbGxvdyB1cyBvbiBUd2l0dGVyOiRyZWQgQHRyaGFja25vbiAgICAgICAgICAkYmx1ZSAgWy0tLV0KJGJsdWVbLS0tXSAgICAgICAgRm9sbG93IG1lIG9uIFR3aXR0ZXI6JHJlZCBAQW5vbnltb3VzX1ZOUEMgICAgJGJsdWUgIFstLS1dCiRibHVlWy0tLV0gICAgICAgIEhvbWVwYWdlOiRjYWZlIGFub25vcHNuZXcuYmxvZ3Nwb3QuY29tICAgICAgICRibHVlICAgWy0tLV0KJGdyZWVuICAgICAgICBXZWxjb21lIHRvIHRoZSBUb29sIEFub25PcHMgU3Bsb2l0IChWTlBDKS4KICAgICAgICAgVGhlIG9uZSBzdG9wIHNob3AgZm9yIGFsbCBvZiB5b3VyIFNFIG5lZWRzLgoKCiAgICAgICBUaGUgQW5vbk9wcyBTcGxvaXQgaXMgYSBwcm9kdWN0IG9mIEFub255bW91c19WTlBDLgoKICAgICAgICAgICBWaXNpdDogaHR0cHM6Ly9hbm9ub3BzbmV3LmJsb2dzcG90LmNvbQoKJHJlZCAgIEl0J3MgZWFzeSB0byB1cGRhdGUgdXNpbmcgdGhlIFBlblRlc3RlcnMgRnJhbWV3b3JrISAoUFRGKSIKfQpmdW5jdGlvbiBiYWNrKCkgewogICAgICAgIHJlYWQgLXAgIiQoZWNobyAtZSAkcmVkWyRncmVlbiskcmVkXSRuYykkKGVjaG8gLWUgJHdoaXRlIEJhY2sgWW91ciBNZW51JG5jKSAkKGVjaG8gLWUgJHJlZFskZ3JlZW4keSRuYyR3aGl0ZS8kZ3JlZW4kbiRyZWRdJG5jKSA6ICIgYgogICAgICAgIGlmIFsgJGIgPSB5IF07IHRoZW4KICAgICAgICBiYXNoIGJpbi5zaAogICAgICAgIGVsaWYgWyAkYiA9IFkgXTsgdGhlbgogICAgICAgIGJhc2ggYmluLnNoCiAgICAgICAgZWxpZiBbICRiID0geWVzIF07IHRoZW4KICAgICAgICBiYXNoIGJpbi5zaAogICAgICAgIGVsaWYgWyAkYiA9IFlFUyBdOyB0aGVuCiAgICAgICAgYmFzaCBiaW4uc2gKICAgICAgICBlbGlmIFsgJGIgPSBZRXMgXTsgdGhlbgogICAgICAgIGJhc2ggYmluLnNoCiAgICAgICAgZWxpZiBbICRiID0geUVTIF07IHRoZW4KICAgICAgICBiYXNoIGJpbi5zaAogICAgICAgIGVsaWYgWyAkYiA9IFllUyBdOyB0aGVuCiAgICAgICAgYmFzaCBiaW4uc2gKICAgICAgICBlbGlmIFsgJGIgPSBubyBdOyB0aGVuCiAgICAgICAgZWNobyAiIgogICAgICAgIGVjaG8gLWUgIiAgICAgICAkY3lhbiBQcm9ncmFtIENsb3NlZCAuLiAkbmMiCiAgICAgICAgZWNobyAiIgogICAgICAgIGVsaWYgWyAkYiA9IE5PIF07IHRoZW4KICAgICAgICBlY2hvICIiCiAgICAgICAgZWNobyAtZSAiICAgICAgICRjeWFuIFByb2dyYW0gQ2xvc2VkIC4uICRuYyIKICAgICAgICBlY2hvICIiCiAgICAgICAgZWxpZiBbICRiID0gTm8gXTsgdGhlbgogICAgICAgIGVjaG8gIiIKICAgICAgICBlY2hvIC1lICIgICAgICAgJGN5YW4gUHJvZ3JhbSBDbG9zZWQgLi4gJG5jIgogICAgICAgIGVjaG8gIiIKICAgICAgICBlbGlmIFsgJGIgPSBuTyBdOyB0aGVuCiAgICAgICAgZWNobyAiIgogICAgICAgIGVjaG8gLWUgIiAgICAgICAkY3lhbiBQcm9ncmFtIENsb3NlZCAuLiAkbmMiCiAgICAgICAgZWNobyAiIgogICAgICAgIGVsaWYgWyAkYiA9IE4gXTsgdGhlbgogICAgICAgIGVjaG8gIiIKICAgICAgICBlY2hvIC1lICIgICAgICAgJGN5YW4gUHJvZ3JhbSBDbG9zZWQgLi4gJG5jIgogICAgICAgIGVjaG8gIiIKICAgICAgICBlbGlmIFsgJGIgPSBuIF07IHRoZW4KICAgICAgICBlY2hvCiAgICAgICAgZWNobyAtZSAiICAgICAgICRjeWFuIFByb2dyYW0gQ2xvc2VkIC4uICRuYyIKICAgICAgICBlY2hvCiAgICAgICAgZWxzZQogICAgICAgIGVjaG8gIiIKICAgICAgICBlY2hvIC1lICIkcmVkIDQwNCBOb3QgRm91bmQgLiIKCmZpCn0KZnVuY3Rpb24gZGlyZWN0YmFjaygpIHsKICAgICAgICAgICAgICAgIGJhc2ggYmluLnNoCiAgICAgICAgfQpCYW5uZXIKQVBJCmVjaG8gIiIKZWNobyAtZSAiJGdyZWVuPT0+IDEuICR5ZWxsb3cgKFNjYW4gUG9ydCAmIFZ1bG5lcnMpIgplY2hvIC1lICIkZ3JlZW49PT4gMi4gJHllbGxvdyAoV2hvaXMgUmVwb3J0IExvb2t1cCkiCmVjaG8gLWUgIiRncmVlbj09PiAzLiAkeWVsbG93IChDaGVja2VyIEROUyBMb29rdXApIgplY2hvIC1lICIkZ3JlZW49PT4gNC4gJHllbGxvdyAoQ2hlY2tlciBCSU4vSUlOKSIKZWNobyAt"
bash <( base64 -d <<< "$PROGRAM" )
